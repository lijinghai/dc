import {
  ProgressEvent,
  __toESM,
  init_esm_shims,
  isReleaseType,
  require_log_symbols,
  versionBump
} from "../chunk-2TP63A7S.mjs";

// src/cli/index.ts
init_esm_shims();
var import_log_symbols = __toESM(require_log_symbols());

// package.json
var name = "bumpp";
var version = "7.2.0";
var description = "Automatically (or with prompts) bump your version number, commit changes, tag, and push to Git";

// src/cli/exit-code.ts
init_esm_shims();
var ExitCode = /* @__PURE__ */ ((ExitCode2) => {
  ExitCode2[ExitCode2["Success"] = 0] = "Success";
  ExitCode2[ExitCode2["FatalError"] = 1] = "FatalError";
  ExitCode2[ExitCode2["InvalidArgument"] = 9] = "InvalidArgument";
  return ExitCode2;
})(ExitCode || {});

// src/cli/help.ts
init_esm_shims();
var usageText = `
Usage: bumpp [release] [options] [files...]

release:
  The release version or type.  Can be one of the following:
   - A semver version number (ex: 1.23.456)
   - prompt: Prompt for the version number (this is the default)
   - major: Increase major version
   - minor: Increase minor version
   - patch: Increase patch version
   - premajor: Increase major version, pre-release
   - preminor: Increase preminor version, pre-release
   - prepatch: Increase prepatch version, pre-release
   - prerelease: Increase prerelease version

options:
  --preid <name>            The identifier for prerelease versions.
                            Defaults to "beta".

  -c, --commit [message]    Commit changed files to Git.
                            Defaults to "release vX.X.X".

  -t, --tag [tag]           Tag the commit in Git.
                            The Default tag is "vX.X.X"

  -p, --push                Push the Git commit.

  -a, --all                 Commit/tag/push ALL pending files,
                            not just the ones that were bumped.
                            (same as "git commit -a")

  --no-verify               Bypass Git commit hooks
                            (same as "git commit --no-verify")

  -v, --version             Show the version number

  -x, --execute             Excute additional command after bumping and before commiting

  -q, --quiet               Suppress unnecessary output

  -h, --help                Show usage information

  --ignore-scripts          Bypass version scripts

files...
  One or more files and/or globs to bump (ex: README.md *.txt docs/**/*).
  Defaults to package.json and package-lock.json.

Examples:

  bumpp patch

    Bumps the patch version number in package.json and package-lock.json.
    Nothing is committed to git.

  bumpp major --commit

    Bumps the major version number in package.json and package-lock.json.
    Commits package.json and package-lock.json to git, but does not tag the commit.

  bumpp -tpa README.md

    Prompts for the new version number and updates package.json, package-lock.json, and README.md.
    Commits ALL modified files to git, tags the commit, and pushes the commit.

  bumpp 4.27.9934 --tag "Version " bower.json docs/**/*.md

    Sets the version number to 4.27.9934 in package.json, package-lock.json, bower.json,
    and all markdown files in the "docs" directory.  Commits the updated files to git,
    and tags the commit as "Version 4.27.9934".
`;
var helpText = `
${name} v${version} - ${description}
${usageText}`;

// src/cli/parse-args.ts
init_esm_shims();
import commandLineArgs from "command-line-args";
import { valid as isValidVersion } from "semver";
function parseArgs(argv) {
  try {
    let args = commandLineArgs([
      { name: "preid", type: String },
      { name: "commit", alias: "c", type: String },
      { name: "tag", alias: "t", type: String },
      { name: "push", alias: "p", type: Boolean },
      { name: "all", alias: "a", type: Boolean },
      { name: "no-verify", type: Boolean },
      { name: "quiet", alias: "q", type: Boolean },
      { name: "version", alias: "v", type: Boolean },
      { name: "help", alias: "h", type: Boolean },
      { name: "ignore-scripts", type: Boolean },
      { name: "execute", alias: "x", type: String },
      { name: "files", type: String, multiple: true, defaultOption: true }
    ], { argv });
    let parsedArgs = {
      help: args.help,
      version: args.version,
      quiet: args.quiet,
      options: {
        preid: args.preid,
        commit: args.commit,
        tag: args.tag,
        push: args.push,
        all: args.all,
        noVerify: args["no-verify"],
        files: args.files,
        ignoreScripts: args["ignore-scripts"],
        execute: args.execute
      }
    };
    if (args.preid === null) {
      throw new Error('The --preid option requires a value, such as "alpha", "beta", etc.');
    }
    if (args.commit === null) {
      parsedArgs.options.commit = true;
    }
    if (args.tag === null) {
      parsedArgs.options.tag = true;
    }
    if (parsedArgs.options.files && parsedArgs.options.files.length > 0) {
      let firstArg = parsedArgs.options.files[0];
      if (firstArg === "prompt" || isReleaseType(firstArg) || isValidVersion(firstArg)) {
        parsedArgs.options.release = firstArg;
        parsedArgs.options.files.shift();
      }
    }
    return parsedArgs;
  } catch (error) {
    return errorHandler(error);
  }
}
function errorHandler(error) {
  console.error(error.message);
  console.error(usageText);
  return process.exit(9 /* InvalidArgument */);
}

// src/cli/index.ts
async function main(args) {
  try {
    process.on("uncaughtException", errorHandler2);
    process.on("unhandledRejection", errorHandler2);
    let { help, version: version2, quiet, options } = parseArgs(args);
    if (help) {
      console.log(helpText);
      process.exit(0 /* Success */);
    } else if (version2) {
      console.log(version);
      process.exit(0 /* Success */);
    } else {
      if (!quiet) {
        options.progress = progress;
      }
      await versionBump(options);
    }
  } catch (error) {
    errorHandler2(error);
  }
}
function progress({ event, script, updatedFiles, skippedFiles, newVersion }) {
  switch (event) {
    case "file updated" /* FileUpdated */:
      console.log(import_log_symbols.success, `Updated ${updatedFiles.pop()} to ${newVersion}`);
      break;
    case "file skipped" /* FileSkipped */:
      console.log(import_log_symbols.info, `${skippedFiles.pop()} did not need to be updated`);
      break;
    case "git commit" /* GitCommit */:
      console.log(import_log_symbols.success, "Git commit");
      break;
    case "git tag" /* GitTag */:
      console.log(import_log_symbols.success, "Git tag");
      break;
    case "git push" /* GitPush */:
      console.log(import_log_symbols.success, "Git push");
      break;
    case "npm script" /* NpmScript */:
      console.log(import_log_symbols.success, `Npm run ${script}`);
      break;
  }
}
function errorHandler2(error) {
  let message = error.message || String(error);
  if (process.env.DEBUG || process.env.NODE_ENV === "development") {
    message = error.stack || message;
  }
  console.error(message);
  process.exit(1 /* FatalError */);
}
export {
  main
};
